PARTITION TABLES:
=================
- GENERALLY, PARTITIONS ARE CREATED ON VERY LARGE SCALE
DATABASE TABLES FOR DIVIDING INTO MULTIPLE SMALL PARTS AND
EACH PART IS CALLED AS "PARTITION".
- BY SPLITTING A LARGE TABLE INTO SMALLER PARTS THEN DATA
CAN ACCESS VERY FAST BECAUSE THERE IS LESS DATA TO SCAN
INSTEAD OF LARGE DATA OF A TABLE.

1. RANGE PARTITION
2. LIST PARTITION
3. HASH PARTITION

1. RANGE PARTITION:
===================

- CREATES A PARTITION TABLE BASED ON A PARTICULAR RANGE VALUE.

SYNTAX:
=======
CREATE TABLE <TN>(<COLUMN NAME1> <DATATYPE>[SIZE],....................................)
PARTITION BY RANGE(KEY COLUMN NAME)
(PARTITION <PARTITION NAME1> VALUES LESS THAN(VALUE),
PARTITION <PARTITION NAME2> VALUES LESS THAN(VALUE),
..................................................................................................,
);

1) RANGE PARTITION:
- CREATES A PARTITION TABLE BASED ON A PARTICULAR RANGE VALUE.

SQL> CREATE TABLE TEST31(EID NUMBER,ENAME VARCHAR2(10)
  2  SAL NUMBER(10))
  3  PARTITION BY RANGE(SAL)
  4  (PARTITION P1 VALUES LESS THAN(500),
  5  PARTITION P2 VALUES LESS THAN(1000),
  6  PARTITION P3 VALUES LESS THAN(2000),
  7  PARTITION P4 VALUES LESS THAN(2500));
SAL NUMBER(10))
*
ERROR at line 2:
ORA-00907: missing right parenthesis


SQL> CREATE TABLE TEST31(EID NUMBER,ENAME VARCHAR2(10),
  2  SAL NUMBER(10))
  3  PARTITION BY RANGE(SAL)
  4  (PARTITION P1 VALUES LESS THAN(500),
  5  PARTITION P2 VALUES LESS THAN(1000),
  6  PARTITION P3 VALUES LESS THAN(2000),
  7  PARTITION P4 VALUES LESS THAN(2500));

Table created.

SQL> INSERT INTO TEST31 VALUES(1,'SMITH',250);

1 row created.

SQL> INSERT INTO TEST31 VALUES(2,'JONES',1500);

1 row created.

SQL> SELECT * FROM TEST31;

       EID ENAME             SAL
---------- ---------- ----------
         1 SMITH             250
         2 JONES            1500

SQL> SELECT * FROM TEST31 PARTITION(P2);

no rows selected

SQL> SELECT * FROM TEST31 PARTITION(P1);

       EID ENAME             SAL
---------- ---------- ----------
         1 SMITH             250

SQL> SELECT * FROM TEST31 PARTITION(P3);

       EID ENAME             SAL
---------- ---------- ----------
         2 JONES            1500
		 

2) LIST PARTITION:
- CREATED A PARTITION TABLE BASED OF THE LIST VALUES.

SQL> CREATE TABLE ORDER_LIST(ORDERID NUMBER,
  2  ORDERNAME VARCHAR2(10),
  3  CITY VARCHAR2(10)
  4  )PARTITION BY LIST(CITY) AUTOMATIC(  --AUTOMATIC(MENTIONED CITIES AUTOMATICALLY TAKEN)
  5  PARTITION AP VALUES('VIZAG','VIJ'),
  6  PARTITION TS VALUES('HYD','WAR'));

Table created.

SQL> INSERT INTO ORDER_LIST VALUES(11,'VEZETABLES','VIZAG');

1 row created.


SQL> INSERT INTO ORDER_LIST VALUES(12,'SUGAR','VIJ');

1 row created.


SQL> INSERT INTO ORDER_LIST VALUES(13,'DAL','WAR');

1 row created.

SQL> INSERT INTO ORDER_LIST VALUES(14,'OIL','HYD');

1 row created.

SQL> SELECT * FROM ORDER_LIST;

   ORDERID ORDERNAME  CITY
---------- ---------- ----------
        11 VEZETABLES VIZAG
        12 SUGAR      VIJ
        13 DAL        WAR
        14 OIL        HYD

SQL> SELECT * FROM ORDER_LIST AP;

   ORDERID ORDERNAME  CITY
---------- ---------- ----------
        11 VEZETABLES VIZAG
        12 SUGAR      VIJ
        13 DAL        WAR
        14 OIL        HYD

SQL> SELECT * FROM ORDER_LIST TS;

   ORDERID ORDERNAME  CITY
---------- ---------- ----------
        11 VEZETABLES VIZAG
        12 SUGAR      VIJ
        13 DAL        WAR
        14 OIL        HYD


SQL> SELECT * FROM PARTITION(HYD);
SELECT * FROM PARTITION(HYD)
              *
ERROR at line 1:
ORA-00904: "PARTITION": invalid identifier


SQL> SELECT * FROM ORDER_LIST PARTITION(HYD);
SELECT * FROM ORDER_LIST PARTITION(HYD)
                                   *
ERROR at line 1:
ORA-02149: Specified partition does not exist


SQL> SELECT * FROM ORDER_LIST PARTITION(CITY);
SELECT * FROM ORDER_LIST PARTITION(CITY)
                                   *
ERROR at line 1:
ORA-02149: Specified partition does not exist


SQL> SELECT * FROM ORDER_LIST PARTITION(AP);

   ORDERID ORDERNAME  CITY
---------- ---------- ----------
        11 VEZETABLES VIZAG
        12 SUGAR      VIJ

SQL> SELECT * FROM ORDER_LIST PARTITION(TS);

   ORDERID ORDERNAME  CITY
---------- ---------- ----------
        13 DAL        WAR
        14 OIL        HYD
		
- MULTILIST :
=============
SQL> CREATE TABLE OEDER_MULTILIST(ORDERID NUMBER,
  2  ORDERNAME VARCHAR2(10),
  3  CITY VARCHAR2(10),
  4  COUNTRY VARCHAR2(10))
  5  PARTITION BY LIST(COUNTRY,CITY) AUTOMATIC(
  6  PARTITION IND_AP VALUES(('INDIA','VIZAG'),('INDIA','VIJ')),
  7  PARTITION IND_TS VALUES(('INDIA','HYD'),('INDIA','WAR')),
  8  PARTITION IND_WB VALUES(('INDIA','KOL'),('INDIA','NEWTOWN'))
  9  );

Table created.


SQL> INSERT INTO ORDER_MULTILIST VALUES(11,'SUGAR','VIZAG','INDIA');

1 row created.

SQL> INSERT INTO ORDER_MULTILIST VALUES(12,'DAL','VIJ','INDIA');

1 row created.

SQL> INSERT INTO ORDER_MULTILIST VALUES(13,'VEZ','HYD','INDIA');

1 row created.

SQL> INSERT INTO ORDER_MULTILIST VALUES(14,'FRUITS','WAR','INDIA');

1 row created.

SQL> INSERT INTO ORDER_MULTILIST VALUES(15,'CLOTHS','KOL','INDIA');

1 row created.

SQL> INSERT INTO ORDER_MULTILIST VALUES(16,'BOOKS','NEWTOWN','INDIA');

1 row created.

SQL> SELECT * FROM ORDER_MULTILIST;

   ORDERID ORDERNAME  CITY       COUNTRY
---------- ---------- ---------- ----------
        11 SUGAR      VIZAG      INDIA
        12 DAL        VIJ        INDIA
        13 VEZ        HYD        INDIA
        14 FRUITS     WAR        INDIA
        15 CLOTHS     KOL        INDIA
        16 BOOKS      NEWTOWN    INDIA

6 rows selected.


SQL> SELECT * FROM ORDER_MULTILIST PARTITION(IND_AP);

   ORDERID ORDERNAME  CITY       COUNTRY
---------- ---------- ---------- ----------
        11 SUGAR      VIZAG      INDIA
        12 DAL        VIJ        INDIA

SQL> SELECT * FROM ORDER_MULTILIST PARTITION(IND_TS);

   ORDERID ORDERNAME  CITY       COUNTRY
---------- ---------- ---------- ----------
        13 VEZ        HYD        INDIA
        14 FRUITS     WAR        INDIA

SQL> SELECT * FROM ORDER_MULTILIST PARTITION(IND);
SELECT * FROM ORDER_MULTILIST PARTITION(IND)
                                        *
ERROR at line 1:
ORA-02149: Specified partition does not exist


SQL> SELECT * FROM ORDER_MULTILIST PARTITION(WB);
SELECT * FROM ORDER_MULTILIST PARTITION(WB)
                                        *
ERROR at line 1:
ORA-02149: Specified partition does not exist

3) HASH PARTITION:

- CREATED A PARTITION TABLE BY THE SYSTEM BY DEFAULT.
- wE CAN USE TO GET TABLE SPACE(MEMORY).

SYNTAX:
=======
CREATE TABLE <TN>(<COLUMN NAME1> <DT>[SIZE],.....................)
PARTITION BY HASH(KEY COLUMN NAME) PARTITIONS <NUMBER>;

EX:
EX:
SQL> CREATE TABLE TEST33(ENAME VARCHAR2(10),SAL NUMBER(10))
2 PARTITION BY HASH(SAL) PARTITIONS 5;

4) COMPOSITE PARTITION:
lIST+HASH OR HASH+RANGE AND PARTITION WITH SUBPARTITION.

NOTE:
======
- TO VIEW PARTITIONS OF A PARTICULAR TABLE THEN WE USE A
DATADICTIONARY IS CALLED AS "USER_TAB_PARTITIONS".
EX:
SQL> DESC USER_TAB_PARTITIONS;
SQL> SELECT PARTITION_NAME FROM USER_TAB_PARTITIONS
WHERE TABLE_NAME='TEST33';
PARTITION_NAME
----------------------------------------
SYS_P457
SYS_P458
SYS_P459
SYS_P460
SYS_P461
HOW TO ADD A NEW PARTITION TO AN EXISTING TABLE:
==================================================
SYNTAX FOR RANGE PARTITION:
============================
ALTER TABLE <TN> ADD PARTITION <PARTITION NAME> VALUES LESS THAN(VALUE);
SYNTAX FOR LIST PARTITION:
=========================
ALTER TABLE <TN> ADD PARTITION <PARTITION NAME> VALUES (V1,V2,................);
EX:
SQL> ALTER TABLE TEST31 ADD PARTITION P4 VALUES LESS THAN(3000);
HOW TO DROP A PARTITION FROM A TABLE:
======================================
SYNTAX:
=======
ALTER TABLE <TN> DROP PARTITION <PARTITON NAME>;
EX:
ALTER TABLE TEST31 DROP PARTITION P1;
NOTE:
=====
- TO CHECK A TABLE IS PARTITIONED OR NOT THEN WE USE A
DATADICTIONARY
IS CALLED AS "USER_TABLES".
EX:
SQL> DESC USER_TABLES;
SQL> SELECT PARTITIONED FROM USER_TABLES WHERE TABLE_NAME='EMP';
PAR
------
NO
SQL> SELECT PARTITIONED FROM USER_TABLES WHERE TABLE_NAME='TEST31';
PAR
------
YES
