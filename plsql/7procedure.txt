Refer nodse first:

-----------------
> A stored procedure is also a named plsql block that accepts some input in the forms of parameters and performs some task and may or may not returns a value.

> Procedured are created to perform one or more dml operations over database.

> CREATE OR REPLACE PROCEDURE <NAME>(parameters if any) IS
   <variables>;

-----------------------
ex:
create procedure:

create procedure test_proc1 as
begin
dbms_output.put_line('hello world');
end;

procedure created.

==========================
check the output:
case 1:
exec test_proc1;

o/p: hello world

case 2:
begin
test_proc1;
end;

o/p: hello world

case 3:
create procedure test_proc2
as
begin
test_proc1;
end;

exec test_proc2;

o/p: helo world
------------------------
parameters:

in: we need to give parameter and in case if we not given then it will defaiult take this in.
out: with this we will take o/p.

in:

create procedure test_proc3(anyname  in varchar2)
as
begin
dbms_output.put_line('Hi '||anyname);
end;

compiled.

> exec test_proc3('henry');

o/p: Hi henry

---------------------------
out:

create procedure test_proc3(anyname  in varchar2,anyname2 out varchar2)
as
begin
dbms_output.put_line('Hi '||anyname);
anyname2:='test_proc3 compiled successfully';
end;

o/p: error test_proc3 already exists.

so we will implement create or replace,

create or replace procedure test_proc3(anyname  in varchar2,anyname2 out varchar2)
as
begin
dbms_output.put_line('Hi '||anyname);
anyname2:='test_proc3 compiled successfully';
end;

o/p: Procedure TEST_PROC3 compiled

-- to get o/p then we will use syntax like below:

declare
var_out varchar2(100);
begin
test_proc3('henry',var_out);
dbms_output.put_line(var_out);
end;

o/p:

Hi henry
test_proc3 compiled successfully
===================================
in and out combine:

create or replace procedure test_proc3(anyname  in out varchar2)
as
begin
dbms_output.put_line('Hi '||anyname);
anyname:='test_proc3 compiled successfully';
end;

Procedure TEST_PROC3 compiled

declare
var_out varchar2(100):='henry';
begin
test_proc3(var_out);
dbms_output.put_line(var_out);
end;

PL/SQL procedure successfully completed.

Hi henry
test_proc3 compiled successfully
-------------------

default:

create or replace procedure test_proc4(anyname in varchar2 default 'henry')
as
begin
dbms_output.put_line('hi '||anyname);
end;

Procedure TEST_PROC4 compiled

exec test_proc4();

PL/SQL procedure successfully completed.

o/p:
hi henry
-----------------------------------------------
example bt naresh it:

create or replace procedure raise_salary(e in number,amp in number,s out number)
is 
begin
update emp set sal=sal+amp where empno=e;
commit;
select sal into s from emp where empno=e;
end;
/
Procedure RAISE_SALARY compiled

variable k number ----line variable (it can access with :k)

exec raise_salary(7369,1000,:k);

select empno,sal from emp;
o/p:

7369	1800
7499	1600
..	..
..	..
..	..

----------------------------------------------------
..

procedure and func diff:

procedure				Function
--------- 			 	---------
1) business logic			1) Calculation
2) Must not have return type		2) must have return type
3) Can return 0 or more values		3) return only 1 value
4) can have in & out parameters		4) can have only IN parameter






















