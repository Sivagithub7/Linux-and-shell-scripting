DATAINTEGRITY:
==============
- to maintain accurate and consistency data in database tables.
1. Declarative dataintegrity
> pre-defined integrity rules.
> by using "constraints"(SQL)
2. Procedural dataintegrity
> user-defined integrity rules.
> by using "triggers" (PL/SQL)

1. Declarative dataintegrity :
========================
- it can be implemented with help of "constraints".
i) entity integrity
ii) referencial integrity
iii) domain integrity

i) entity integrity:
===============
- it ensure that each row in a table is unique(different) identity.
- it can implement by using "primary key / unique" constraints.

ii) referencial integrity:
====================
- to making relationships between tables.
- by using "foreign key" / "references key".

iii) domain integrity:
=================
- domain = column.
- to check values before accepting into a column.
- by using "check,not null,default" constraints.

CONSTRAINTS:
=============
- to enforce / restricted unwanted data into database table.
> unique
> not null
> check
> primary key
> foreign key / references
> default
- all databases are supporting the following two levels to defined
constraints on a table

1) UNIQUE :
========
- to restricted duplicate values but allowed nulls into a column.

SQL> CREATE TABLE TEST1(
  2  SNO INT UNIQUE,
  3  NAME VARCHAR2(10) UNIQUE);

Table created.

COLUMN LEVEL:
----------

SQL> INSERT INTO TEST1 VALUES(1,'A');

1 row created.

SQL> INSERT INTO TEST1 VALUES(1,'A');
INSERT INTO TEST1 VALUES(1,'A')
*
ERROR at line 1:
ORA-00001: unique constraint (SYSTEM.SYS_C007657) violated

SQL> INSERT INTO TEST1 VALUES(NULL,NULL);

1 row created.

SQL> SELECT * FROM TEST1;

       SNO NAME
---------- ----------
         1 A

table level:
=========
EX:

SQL> CREATE TABLE TEST2(SNO INT,NAME VARCHAR2(10),
UNIQUE(SNO,NAME));

TESTING:
SQL> INSERT INTO TEST2 VALUES(1,'A');----allowed
SQL> INSERT INTO TEST2 VALUES(1,'A');-----not
SQL> INSERT INTO TEST2 VALUES(1,'B');-----allowed
SQL> INSERT INTO TEST2 VALUES(NULL,NULL);-----allowed

>> NOT NULL:
  =========
- to restricted nulls but allowed duplicate values.
- can defined at column level only.

EX: 

SQL> CREATE TABLE TEST3(
  2  CID INT NOT NULL,CNAME VARCHAR2(10) NOT NULL);

Table created.

SQL> INSERT INTO TEST3 VALUES(NULL,NULL);
INSERT INTO TEST3 VALUES(NULL,NULL)
                         *
ERROR at line 1:
ORA-01400: cannot insert NULL into ("SYSTEM"."TEST3"."CID")


SQL> INSERT INTO TEST3 VALUES(1,'C');

1 row created.

SQL> INSERT INTO TEST3 VALUES(1,'C');

1 row created.

SQL> SELECT * FROM TEST3;

       CID CNAME
---------- ----------
         1 C
         1 C

>> CHECK:
=======
- to check values with user defined condition before accepting
values into a column.
column level:
===========

SQL> CREATE TABLE TEST4(
  2  ENAME VARCHAR2(10),
  3  SAL NUMBER(10) CHECK(SAL>8000));

Table created.

SQL> INSERT INTO TEST4 VALUES('A',7500);
INSERT INTO TEST4 VALUES('A',7500)
*
ERROR at line 1:
ORA-02290: check constraint (SYSTEM.SYS_C007666) violated


SQL> INSERT INTO TEST4 VALUES('A',8000);
INSERT INTO TEST4 VALUES('A',8000)
*
ERROR at line 1:
ORA-02290: check constraint (SYSTEM.SYS_C007666) violated


SQL> INSERT INTO TEST4 VALUES('A',8001);

1 row created.

table level:
==========
SQL> CREATE TABLE TEST6(ENAME VARCHAR2(10),SAL NUMBER(10),
2 CHECK(ENAME=LOWER(ENAME) AND SAL>=5000));
TESTING:
SQL> INSERT INTO TEST6 VALUES('SMITH',6000);------NOT ALLOWED
SQL> INSERT INTO TEST6 VALUES('smith',4000);----NOT ALLOWED
SQL> INSERT INTO TEST6 VALUES('smith',6000);----ALLOWED

>> PRIMARY KEY:
============
- it is combination of UNIQUE and NOT NULL.
- to restricted duplicates and nulls.
- a table is having only one "primary key".
column level:
===========

EX:

SQL> CREATE TABLE TEST5(
  2  PINCODE INT PRIMARY KEY,
  3  PNAME VARCHAR2(10));

Table created.


SQL> INSERT INTO TEST5 VALUES(1021,'C++');

1 row created.

SQL> INSERT INTO TEST5 VALUES(1021,'C');
INSERT INTO TEST5 VALUES(1021,'C')
*
ERROR at line 1:
ORA-00001: unique constraint (SYSTEM.SYS_C007667) violated


SQL> INSERT INTO TEST5 VALUES(NULL,'C');
INSERT INTO TEST5 VALUES(NULL,'C')
                         *
ERROR at line 1:
ORA-01400: cannot insert NULL into ("SYSTEM"."TEST5"."PINCODE")


> table level:
==========

SQL> CREATE TABLE TEST6(
  2  PCODE INT,PNAME VARCHAR2(10),
  3  PRIMARY KEY(PCODE,PNAME));

Table created.

SQL> INSERT INTO TEST6 VALUES(1021,'C++');

1 row created.

SQL> INSERT INTO TEST6 VALUES(1021,'C');

1 row created.

SQL> INSERT INTO TEST6 VALUES(NULL,'C');
INSERT INTO TEST6 VALUES(NULL,'C')
                         *
ERROR at line 1:
ORA-01400: cannot insert NULL into ("SYSTEM"."TEST6"."PCODE")

>> FOREIGN KEY:
=============
- to make relationship between tables.so that a table can take identity (references) from another table.

EX:

SQL> CREATE TABLE FOREIGN(
  2  SID INTEGER,
  3  SNAME VARCHAR2(10),
  4  BRANCH VARCHAR2(10),
  5  CID INTEGER,
  6  PRIMARY KEY(SID),
  7  FOREIGN KEY(CID) REFERENCES PRIMARY(CID));

Table created.

SQL> INSERT INTO FOREIGN VALUES(10,'RAM','ECE',10);

1 row created.

SQL> INSERT INTO FOREIGN VALUES(10,'R','CSE',10);
INSERT INTO FOREIGN VALUES(10,'R','CSE',10)
*
ERROR at line 1:
ORA-00001: unique constraint (SYSTEM.SYS_C007670) violated


SQL> INSERT INTO FOREIGN VALUES(11,'R','CSE',10);

1 row created.

SQL> INSERT INTO FOREIGN VALUES(16,'Y','EEE',12);
INSERT INTO FOREIGN VALUES(16,'Y','EEE',12)
*
ERROR at line 1:
ORA-02291: integrity constraint (SYSTEM.SYS_C007671) violated - parent key not
found


SQL> SELECT * FROM FOREIGN;

       SID SNAME      BRANCH            CID
---------- ---------- ---------- ----------
        10 RAM        ECE                10
        11 R          CSE                10

>> DEFAULT : iT IS USED TO ASSIGN A USER DEFINED DEFAULT VALUE TO A COLUMN.

EX:

SQL> CREATE TABLE DEF(
  2   SID INTEGER,
  3  SNAME VARCHAR2(10),
  4  BRANCH VARCHAR2(10) DEFAULT 'ECE',
  5  PRIMARY KEY(SID));

Table created.

SQL> INSERT INTO DEF VALUES(12,'RAJ','ECE');

1 row created.

SQL> INSERT INTO DEF VALUES(12,'RAJ','EEE');
INSERT INTO DEF VALUES(12,'RAJ','EEE')
*
ERROR at line 1:
ORA-00001: unique constraint (SYSTEM.SYS_C007672) violated


SQL> INSERT INTO DEF VALUES(13,'RAJ','EEE');

1 row created.

SQL> SELECT * FROM DEF;

       SID SNAME      BRANCH
---------- ---------- ----------
        12 RAJ        ECE
        13 RAJ        EEE

SQL> INSERT INTO DEF VALUES(14,'RAJ');
INSERT INTO DEF VALUES(14,'RAJ')
            *
ERROR at line 1:
ORA-00947: not enough values


SQL> INSERT INTO DEF VALUES(14,'RAJ',NULL);

1 row created.

SQL> SELECT * FROM DEF;

       SID SNAME      BRANCH
---------- ---------- ----------
        12 RAJ        ECE
        13 RAJ        EEE
        14 RAJ

SQL> INSERT INTO DEF (SID,SNAME,BRANCH)VALUES(15,'RAMU',);
INSERT INTO DEF (SID,SNAME,BRANCH)VALUES(15,'RAMU',)
                                                   *
ERROR at line 1:
ORA-00936: missing expression


SQL> INSERT INTO DEF (SID,SNAME,BRANCH)VALUES(15,'RAMU');
INSERT INTO DEF (SID,SNAME,BRANCH)VALUES(15,'RAMU')
                                  *
ERROR at line 1:
ORA-00947: not enough values


SQL> INSERT INTO DEF (SID,SNAME,BRANCH) VALUES (15,'RAMU');
INSERT INTO DEF (SID,SNAME,BRANCH) VALUES (15,'RAMU')
                                   *
ERROR at line 1:
ORA-00947: not enough values


SQL> INSERT INTO DEF (SID,SNAME) VALUES (15,'RAMU');

1 row created.

SQL> SELECT * FROM DEF;

       SID SNAME      BRANCH
---------- ---------- ----------
        12 RAJ        ECE
        13 RAJ        EEE
        14 RAJ
        15 RAMU       ECE

HOW TO ADD CONSTRAINT TO AN EXISTING TABLE:
============================================
SYNTAX:
=======
ALTER TABLE <TN> ADD CONSTRAINT <CONSTRAINT KEY NAME>
<CONSTRAINT TYPE>(COLUMN NAME);
ADDING A PRIMARY KEY:
======================
EX:
SQL> CREATE TABLE PARENT
2 (EID INT,
3 ENAME VARCHAR2(10),
4 SAL NUMBER(10)
5 );
EX:
SQL> ALTER TABLE PARENT ADD CONSTRAINT EID_PK
2 PRIMARY KEY(EID);
HOW TO ADD UNIQUE,CHECK CONSTRAINT:
======================================
EX:
SQL> ALTER TABLE PARENT ADD CONSTRAINT ENAME_UQ UNIQUE(ENAME);
SQL> ALTER TABLE PARENT ADD CONSTRAINT SAL_CHK CHECK(SAL>5000);
HOW TO ADD "NOT NULL" CONSTRAINT:
===================================
SYNTAX:
========
ALTER TABLE <TN> MODIFY <COLUMN NAME> <CONSTRAINT>
<CONSTRAINT KEY NAME> NOT NULL;
EX:
SQL> ALTER TABLE PARENT MODIFY ENAME CONSTRAINT ENAME_NN NOT NULL;
HOW TO ADD A FOREIGN KEY CONSTRAINT:
======================================
SYNTAX:
========
ALTER TABLE <TN> ADD CONSTRAINT <CONSTRAINT KEY NAME>
FOREIGN KEY(COMMON COLUMN OF CHILD TABLE) REFERENCES
<PARENT TABLE NAME>(COMMON COLUMN OF PARENT TABLE)
ON DELETE CASCADE / ON DELETE SET NULL;
EX:
SQL> CREATE TABLE CHILD(DNAME VARCHAR2(10),EID INT);
SQL> ALTER TABLE CHILD ADD CONSTRAINT
2 EID_FK FOREIGN KEY(EID) REFERENCES
3 PARENT(EID) ON DELETE CASCADE;
HOW TO REMOVE CONSTRAINT FROM AN EXISTING TABLE:
===================================================
SYNTAX:
========
ALTER TABLE <TN> DROP CONSTRAINT <CONSTRAINT KEY NAME>;
HOW TO DROP A PRIMARY KEY:
============================
CASE-1: WITHOUT RELATIONSHIP:
=============================
SQL> ALTER TABLE PARENT DROP CONSTRAINT EID_PK;
CASE-2: WITH RELATIONSHIP:
=========================
SQL> ALTER TABLE PARENT DROP CONSTRAINT EID_PK CASCADE;
HOW TO DROP UNIQUE,CHECK,NOT NULL:
=====================================
EX:
SQL> ALTER TABLE PARENT DROP CONSTRAINT ENAME_UQ;
SQL> ALTER TABLE PARENT DROP CONSTRAINT SAL_CHK;
SQL> ALTER TABLE PARENT DROP CONSTRAINT ENAME_NN;
HOW TO RENAME CONSTRAINT NAME:
=================================
SYNTAX:
========
ALTER TABLE <TN> RENAME CONSTRAINT <OLD CONSTRAINT KEY NAME> TO
<NEW CONSTRAINT KEY NAME>;
EX:
SQL> CREATE TABLE TEST11(CID INT PRIMARY KEY,CNAME VARCHAR2(10));
Table created.
SQL> SELECT COLUMN_NAME,CONSTRAINT_NAME
2 FROM USER_CONS_COLUMNS WHERE TABLE_NAME='TEST11';
COLUMN_NAME CONSTRAINT_NAME
------------------------------------------------
--------------------------------------------------------------------------------
CID SYS_C007499
EX:
SQL> ALTER TABLE TEST11 RENAME CONSTRAINT SYS_C007499 TO CID_PK;
COLUMN_NAME CONSTRAINT_NAME
------------------------------------------------
--------------------------------------------------------------------------------
CID CID_PK
HOW TO DISABLE / ENABLE CONSTRAINT:
====================================
- BY DEFAULT ALL CONSTRAINTS ARE ENABLE MODE(WORKING).IF WE
WANT TO DISABLE A CONSTRAINT TEMPORARLY THEN WE USE "DISABLE" KEYWORD.
SYNTAX TO DISABLE A CONSTRAINT:
================================
ALTER TABLE <TN> DISABLE <CONSTRAINT> <CONSTRAINT KEY NAME>;
EX:
SQL> CREATE TABLE TEST12(ENAME VARCHAR2(10),
SAL NUMBER(10) CHECK(SAL>5000));
TESTING:
SQL> INSERT INTO TEST12 VALUES('A',4500);----NOT ALLOWED
ERROR at line 1:
ORA-02290: check constraint (MYDB9AM.SYS_C007500) violated
EX:
ALTER TABLE TEST12 DISABLE CONSTRAINT SYS_C007500;
TESTING:
SQL> INSERT INTO TEST12 VALUES('A',4500);----ALLOWED
HOW TO ENABLE CONSTRAINT ON A TABLE:
======================================
SYNTAX:
========
ALTER TABLE <TN> ENABLE <CONSTRAINT> <CONSTRAINT KEY NAME>;
EX:
SQL> ALTER TABLE TEST12 ENABLE CONSTRAINT SYS_C007500;
ERROR at line 1:
ORA-02293: cannot validate (MYDB9AM.SYS_C007500) - check constraint violated
- TO ENABLE A CONSTRAINT THEN WE SHOULD USE A PRE-DEFINED KEYWORD
IS
"NOVALIDATE" . WHEREAS NOVALIDATE KEYWORD IS USED TO VERIFY NEWLY
INSERTED DATA
BUT NOT AN EXISTING DATA IN A TABLE.
EX:
SQL> ALTER TABLE TEST12 ENABLE NOVALIDATE CONSTRAINT SYS_C007500;
Table altered.
TESTING:
SQL> INSERT INTO TEST12 VALUES('E',4800);----NOT ALLOWED
DEFAULT CONSTRAINT:
====================
- IT IS USED TO ASSIGN A USER DEFINED DEFAULT VALUE TO A COLUMN.
EX:
SQL> CREATE TABLE TEST13(ENAME VARCHAR2(10),CITY VARCHAR2(10) DEFAULT
'HYD');
TESTING:
SQL> INSERT INTO TEST13 VALUES('SMITH','PUNE');
SQL> INSERT INTO TEST13(ENAME) VALUES('ALLEN');
SQL> SELECT * FROM TEST13;
ENAME CITY
---------- ----------
SMITH PUNE
ALLEN HYD
HOW TO ADD DEFAULT VALUE TO AN EXISTING TABLE:
===============================================
SYNTAX:
========
ALTER TABLE <TN> MODIFY <COLUMN NAME> DEFAULT <VALUE>;
EX:
SQL> CREATE TABLE TEST14(EID INT,SAL NUMBER(10));
SQL> ALTER TABLE TEST14 MODIFY SAL DEFAULT 8000;
TESTING:
SQL> INSERT INTO TEST14 VALUES(1,2500);
SQL> INSERT INTO TEST14(EID)VALUES(2);
SQL> SELECT * FROM TEST14;
EID SAL
---------- ----------
1 2500
2 8000
NOTE:
=====
- IF WE WANT TO VIEW A DEFAULT VALUE OF A PARTICULAR COLUMN OF A
TABLE
IN ORACLE DATABASE THEN WE USE A DATADICTIONARY IS CALLED AS "
USER_TAB_COLUMNS".
EX:
SQL> DESC USER_TAB_COLUMNS;
SQL> SELECT COLUMN_NAME,DATA_DEFAULT FROM
USER_TAB_COLUMNS WHERE TABLE_NAME='TEST14';
COLUMN_NAME DATA_DEFAULT
--------------------------------------------- -----------------------------------
SAL 8000

HOW TO REMOVE DEFAULT VALUE FROM A COLUMN:
=============================================
EX:
SQL> ALTER TABLE TEST14 MODIFY SAL DEFAULT NULL;
TESTING:
SQL> INSERT INTO TEST14(EID)VALUES(3);
SQL> SELECT * FROM TEST14;
EID SAL
---------- ----------
1 2500
2 8000
3
COLUMN_NAME DATA_DEFAULT
--------------------------------------------- -----------------------------------
SAL NULL



