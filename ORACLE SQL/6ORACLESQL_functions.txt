FUNTIONS
========

- To perform some task and it must be return a value.
- oracle supports the following two types of functions.
1. Pre-defined functions
> use in SQL & PL/SQL

2. User-defined functions
> use in PL/SQL only

1. Pre-defined functions:
=========================
- these functions are also called as "built in functions".
i) single row functions
ii) multiple row functions

i) Single row functions:
========================
- these functions are always return a single value.
> number functions
> string functions
> date functions
> conversion functions
> analytical functions(see in subquery)

>> How to call a function:
=======================
syntax:
=======
select <fname>(value/(s)) from dual;

What is dual:
=============
- it is pre-defined / system defined table.
- it is having only one column and one row.
- it is also called as "dummy table".
- is used to test function functionalities.

to view the structure of dual table:
====================================
syntax:
========

SQL> DESC DUAL;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 DUMMY                                              VARCHAR2(1)
 
 TABLE:
 
 SQL> SET LINES 150;
SQL> SELECT * FROM EMPLOYEE;

     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM     DEPTNO
---------- ---------- --------- ---------- --------- ---------- ---------- ----------
      7369 SMITH      CLERK           7902 17-DEC-80        800
                   20
      7499 ALLEN      SALESMAN        7698 20-FEB-81       1600        300          30
      7521 WARD       SALESMAN        7698 22-FEB-81       1250        500          30
      7566 JONES      MANAGER         7839 02-APR-81       5500
                   20
      7654 MARTIN     SALESMAN        7698 28-SEP-81       1250       1400          30
      7698 BLAKE      MANAGER         7839 01-MAY-81       5500
                   30
      7782 CLARK      MANAGER         7839 09-JUN-81       5500       1200          10
      7788 SCOTT      ANALYST         7566 09-DEC-82       3000
                   20
      7839 KING       PRESIDENT            17-NOV-81       5000       1200          10
      7844 TURNER     SALESMAN        7698 08-SEP-81       1500
         0         30
      7876 ADAMS      CLERK           7788 12-JAN-83       1100
                   20

     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM     DEPTNO
---------- ---------- --------- ---------- --------- ---------- ---------- ----------
      7900 JAMES      CLERK           7698 03-DEC-81        950
                   30
      7902 FORD       ANALYST         7566 03-DEC-81       3000
                   20
      7934 MILLER     CLERK           7782 23-JAN-82       1300       1200          10

14 rows selected.


> number functions:
==================
- these functions are also called as "mathematical funcitons" in oracle db.

ABS():
======
- to convert (-ve) sign values into (+ve) sign values.

syntax:
=======
abs(n)

EX: 

SQL> SELECT ABS(-12) FROM DUAL;

  ABS(-12)
----------
        12
		
EX:

SQL> SELECT ENAME,SAL,COMM,ABS(COMM-SAL) FROM EMPLOYEE;

ENAME             SAL       COMM ABS(COMM-SAL)
---------- ---------- ---------- -------------
SMITH             800
ALLEN            1600        300          1300
WARD             1250        500           750
JONES            5500
MARTIN           1250       1400           150
BLAKE            5500
CLARK            5500       1200          4300
SCOTT            3000
KING             5000       1200          3800
TURNER           1500          0          1500
ADAMS            1100

ENAME             SAL       COMM ABS(COMM-SAL)
---------- ---------- ---------- -------------
JAMES             950
FORD             3000
MILLER           1300       1200           100

14 rows selected.

> CEIL(): it return a value which is greater than or is equals to the given expression.

EX: 

SQL> SELECT CEIL(12.5) FROM DUAL;

CEIL(12.5)
----------
        13
		
EX:

SQL> SELECT CEIL(12.0) FROM DUAL;

CEIL(12.0)
----------
        12

> FLOOR(): it return a value which is less than or is equals to the given expression.
=======

EX:

SQL> SELECT FLOOR(12.0) FROM DUAL;

FLOOR(12.0)
-----------
         12

SQL> SELECT FLOOR(12.5) FROM DUAL;

FLOOR(12.5)
-----------
         12
		 
> MOD(): it return the remainder value of given expression.
======

EX:

SQL> SELECT MOD(10,3) FROM DUAL;

 MOD(10,3)
----------
         1
		 
> POWER(): it return the power of the given expression.
========

EX:

SQL> SELECT POWER(10,3) FROM DUAL;

POWER(10,3)
-----------
       1000
	   
> ROUND():
========
- it return the nearest value to the given expression.

syntax:
=======
round(expression,[decimal places])

EX:

SQL> SELECT ROUND(45.35) FROM DUAL;

ROUND(45.35)
------------
          45

SQL> SELECT ROUND(45.50) FROM DUAL;

ROUND(45.50)
------------
          46

SQL> SELECT ROUND(45.5789,3) FROM DUAL;

ROUND(45.5789,3)
----------------
          45.579
		  
> TRUNC():
========
- it return an exact value from the given expression.

syntax:
=======
trunc(expression,[decimal places])

EX: 

SQL> SELECT TRUNC(45.78) FROM DUAL;

TRUNC(45.78)
------------
          45

SQL> SELECT TRUNC(45.29) FROM DUAL;

TRUNC(45.29)
------------
          45

SQL> SELECT TRUNC(45.2998,3) FROM DUAL;

TRUNC(45.2998,3)
----------------
          45.299

>> STRING FUNCTIONS:
==================
LENGTH():
=========
- it return the length of the given string.

syntax:
=======
length(string)

EX: 

SQL> SELECT LENGTH('HARRY') FROM DUAL;

LENGTH('HARRY')
---------------
              5
			  
EX:

SQL> SELECT * FROM EMPLOYEE WHERE LENGTH(ENAME)=6;

     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM     DEPTNO
---------- ---------- --------- ---------- --------- ---------- ---------- ----------
      7654 MARTIN     SALESMAN        7698 28-SEP-81       1250       1400          30
      7844 TURNER     SALESMAN        7698 08-SEP-81       1500
         0         30
      7934 MILLER     CLERK           7782 23-JAN-82       1300       1200          10
	  

SQL> SELECT ENAME,LENGTH(ENAME) FROM EMPLOYEE;

ENAME      LENGTH(ENAME)
---------- -------------
SMITH                  5
ALLEN                  5
WARD                   4
JONES                  5
MARTIN                 6
BLAKE                  5
CLARK                  5
SCOTT                  5
KING                   4
TURNER                 6
ADAMS                  5

> LOWER():
========
- convert upper case characters into lower case characters.

syntax:
=======
lower(string)

EX:

SQL> UPDATE EMPLOYEE SET ENAME=LOWER(ENAME) WHERE JOB='MANAGER';
3 rows updated.

       7566 jones      MANAGER         7839 02-APR-81       5500
                   20
      7654 MARTIN     SALESMAN        7698 28-SEP-81       1250       1400          30
      7698 blake      MANAGER         7839 01-MAY-81       5500
                   30
      7782 clark      MANAGER         7839 09-JUN-81       5500 

SQL> SELECT ENAME,LOWER(ENAME) FROM EMPLOYEE;

ENAME      LOWER(ENAM
---------- ----------
SMITH      smith
ALLEN      allen
WARD       ward
JONES      jones
MARTIN     martin
BLAKE      blake
CLARK      clark
SCOTT      scott
KING       king
TURNER     turner
ADAMS      adams

> UPPER():
========
- convert lower case characters into upper case characters.

syntax:
=======
upper(string)

EX:

SQL> UPDATE EMPLOYEE SET ENAME=UPPER(ENAME) WHERE JOB='MANAGER';

      7566 JONES      MANAGER         7839 02-APR-81       5500
                   20
      7654 MARTIN     SALESMAN        7698 28-SEP-81       1250       1400          30
      7698 BLAKE      MANAGER         7839 01-MAY-81       5500
                   30
      7782 CLARK      MANAGER         7839 09-JUN-81       5500  
	  
SQL> SELECT UPPER('hello') FROM DUAL;

UPPER
-----
HELLO

> CONCAT():
=========
- to add two string expressions.

EX:

SQL> SELECT CONCAT('GOOD','MORNING') FROM DUAL;

--CONCAT('GOO
-----------
GOODMORNING

SQL> select concat('mr','smith') from employee;

CONCAT(
-------
mrsmith
mrsmith
mrsmith
mrsmith
mrsmith

> LTRIM():
========
- to remove unwanted characters / spaces from the left side of given string.

EX:

SQL> SELECT LTRIM('   SAI') FROM DUAL;

LTR
---
SAI

SQL> SELECT LTRIM('XXXXSAI') FROM DUAL;

LTRIM(
-------
XXXXSAI

SQL> SELECT LTRIM('XXXXSAI','X') FROM DUAL;

LTR
---
SAI

> RTRIM() :  to remove unwanted characters / spaces from the right side of given string.

EX:


SQL> SELECT RTRIM('SAI   ') FROM DUAL;

RTR
---
SAI

SQL> SELECT RTRIM('SAIXXXX','X') FROM DUAL;

RTR
---
SAI

> TRIM():
=======
- to remove unwanted characters/spaces from both sides of the given string.

EX:

SQL> SELECT TRIM('X' FROM 'XXXXSAIXXXXXXX') FROM DUAL;

TRI
---
SAI

> INITCAP():
==========
- to convert the first character as capital in the given string.

EX:

SQL> SELECT INITCAP('HELLO') FROM DUAL;

INITC
-----
Hello

SQL> SELECT INITCAP('hELLO') FROM DUAL;

INITC
-----
Hello

> LPAD():
=======
- to fill a string expression with specific character on left side as per the given length.

EX:

SQL> SELECT LPAD('SAI',10) FROM DUAL;

LPAD('SAI'
----------
       SAI
	   

SQL> SELECT LPAD('SAI',10,'*') FROM DUAL;

LPAD('SAI'
----------
*******SAI

> RPAD():
=======
- to fill a string expression with specific character on right side as per the given length.

EX:


SQL> SELECT RPAD('SAI',10) FROM DUAL;

RPAD('SAI'
----------
SAI

SQL> SELECT RPAD('SAI',10,'*') FROM DUAL;

RPAD('SAI'
----------
SAI*******

> REPLACE():
==========
- to replace string to string.

EX:

SQL> SELECT REPLACE('HELLO','ELL','XY') FROM DUAL;

REPL
----
HXYO

SQL> SELECT REPLACE('JACK AND JUE','J','BL') FROM DUAL;

REPLACE(JACKA
--------------
BLACK AND BLUE

> TRANSLATE():
============
- to change character by character.

EX:


SQL> SELECT TRANSLATE('HELLO','ELO','XY') FROM DUAL;

TRAN
----
HXYY

SQL> SELECT TRANSLATE('HELLO','ELO','XYZ') FROM DUAL;

TRANS
-----
HXYYZ

> SUBSTR():
========
- it return the required substring from the given string.

EX;


SQL> SELECT SUBSTR('WELCOME',5,2) FROM DUAL;

SU
--
OM

SQL> SELECT SUBSTR('WELCOME',1,3) FROM DUAL;

SUB
---
WEL

SQL> SELECT SUBSTR('WELCOME',-5,3) FROM DUAL;

SUB
---
LCO

> INSTR():
========
- it return the occurrence position of character from the given string expression.

EX:

SQL> SELECT INSTR('HELLO WELCOME','O',1,2) FROM DUAL;
INSTR('HELLOWELCOME','O',1,2)
-----------------------------
11
SQL> SELECT INSTR('HELLO WELCOME','L',-1,1) FROM DUAL;
INSTR('HELLOWELCOME','L',-1,1)
------------------------------
9
SQL> SELECT INSTR('HELLO WELCOME','E',-12,1) FROM DUAL;
INSTR('HELLOWELCOME','E',-12,1)
-------------------------------
2

>> DATE FUNCTIONS:
===============
> SYSDATE:
========
- it returns the current date of the system.

EX;

SQL> SELECT SYSDATE FROM DUAL;

SYSDATE
---------
12-JUL-23

SQL> SELECT SYSDATE+10 FROM DUAL;

SYSDATE+1
---------
22-JUL-23

SQL> SELECT SYSDATE-10 FROM DUAL;

SYSDATE-1
---------
02-JUL-23

> ADD_MONTHS():
=============
- to add / subtract no.of months to the given date.

EX:

SQL> SELECT ADD_MONTHS(SYSDATE,3) FROM DUAL;

ADD_MONTH
---------
12-OCT-23

SQL> SELECT ADD_MONTHS(SYSDATE,-3) FROM DUAL;

ADD_MONTH
---------
12-APR-23

TABLE:
 CREATE TABLE PRODUCT
 (
 PCODE INT,
 PNAME VARCHAR2(10),
 MFG DATE,
 EXP DATE
);
   BEFORE:

SQL> SELECT * FROM PRODUCT;

     PCODE PNAME      MFG       EXP
---------- ---------- --------- ---------
      1021 P1         24-JUN-19 24-JUN-20
      1022 P2         05-MAY-20 05-MAY-21
	  
	  AFTER:
	  
SQL> UPDATE PRODUCT SET EXP=ADD_MONTHS(MFG,48);

2 rows updated.

SQL> SELECT * FROM PRODUCT;

     PCODE PNAME      MFG       EXP
---------- ---------- --------- ---------
      1021 P1         24-JUN-19 24-JUN-23
      1022 P2         05-MAY-20 05-MAY-24

> LAST_DAY():
============
- it return the last day from the given month in the date expression.

EX:

SQL> SELECT LAST_DAY(SYSDATE) FROM DUAL;

LAST_DAY(
---------
31-JUL-23

> MONTHS_BETWEEN():
=================
- it return the no.of months in between the given two date expressions.

EX:

SQL> SELECT MONTHS_BETWEEN('01-JAN-21','31-DEC-22') FROM DUAL;

MONTHS_BETWEEN('01-JAN-21','31-DEC-22')
---------------------------------------
                             -23.967742


>> CONVERSION FUNCTIONS:
=====================
i) TO_CHAR()
ii) TO_DATE()

i) TO_CHAR():
=============
- to convert oracle date expression into character type and also to display date in different formats.

EX:

Year Formats:
---------------------------
YYYY - 2022
YY - 22
YEAR - Twenty Twenty-Two
CC - Centuary 21
AD / BC - AD Year / BC Year

EX:

SQL> SELECT TO_CHAR(SYSDATE,'YYYY YY YEAR CC BC') FROM DUAL;

TO_CHAR(SYSDATE,'YYYYYYYEARCCBC')
--------------------------------------------------------
2022 22 TWENTY TWENTY-TWO 21 AD

> Month Format:
----------------------------
MM - Month Number
MON - First Three Char From Month Spelling
MONTH - Full Name Of Month

EX:

EX:
SQL> SELECT TO_CHAR(SYSDATE,'MM MON MONTH') FROM DUAL;

TO_CHAR(SYSDATE,'MMMONMONTH')
----------------------------------------------------
09 SEP SEPTEMBER


Day Formats:
-------------------------

DDD - Day Of The Year.
DD - Day Of The Month.
D - Day Of The Week
Sun - 1
Mon - 2
Tue - 3
Wen - 4
Thu - 5
Fri - 6
Sat - 7
DAY - Full Name Of The Day
DY - First Three Char s Of Day Spelling

EX:
SQL> SELECT TO_CHAR(SYSDATE,'DDD DD D DAY DY') FROM DUAL;
TO_CHAR(SYSDATE,'DDDDDDDAYDY')
----------------------------------------------------------
260 17 7 SATURDAY SAT


Quater Format:
----------------------------
Q - One Digit Quater Of The Year
1 - Jan - Mar
2 - Apr - Jun
3 - Jul - Sep
4 - Oct - Dec
EX:
SQL> SELECT TO_CHAR(SYSDATE,'Q') FROM DUAL;
T
-
3


Week Format:
--------------------------
WW - Week Of The Year
W - Week Of Month
EX:
SQL> SELECT TO_CHAR(SYSDATE,'WW W') FROM DUAL;
TO_C
----
38 3


Time Format:
-------------------------
HH - Hour Part in 12 hrs format
Hh24 - Hour part in 24 hrs Fromat
MI - Minute Part
SS - Seconds Part
AM / PM - Am Tme (Or) Pm Time

EX:

SQL> SELECT TO_CHAR(SYSDATE,'HH HH24 MI SS PM') FROM DUAL;
TO_CHAR(SYSDAT
--------------
09 09 56 55 AM
=================================

> to_date():
==============
- to convert character type to oracle default date type.

EX:

SQL> SELECT TO_DATE('08/AUGUST/2021') FROM DUAL;

TO_DATE(
---------
08-AUG-21

SQL> SELECT TO_DATE('08/AUGUST/2021')+5 FROM DUAL;

TO_DATE(
---------
13-AUG-21

>> Multiple row functions:
============================
- these functions are working on group of values but return a single value.
- these functions are also called as grouping functions (or) aggregative functions.
- these functions are SUM(),AVG(),MIN(),MAX(),COUNT().

> SUM():
=====
- to return total value.

EX:

SQL> SELECT SUM(SAL) TOTAL_SALARY FROM EMPLOYEE;

TOTAL_SALARY
------------
       37250

SQL> SELECT SUM(SAL) TOTAL_SALARY FROM EMPLOYEE WHERE DEPTNO=10;

TOTAL_SALARY
------------
       11800
	   
> AVG():
======
- to return average of total.

EX:

SQL> SELECT AVG(SAL) AVG_SALARY FROM EMPLOYEE;

AVG_SALARY
----------
2660.71429

SQL> SELECT AVG(SAL) AVG_SALARY FROM EMPLOYEE WHERE DEPTNO=10;

AVG_SALARY
----------
3933.33333

> MIN():
======
- it return minimum value.

EX: 
SQL> SELECT MIN(SAL)  FROM EMPLOYEE WHERE JOB='MANAGER';

  MIN(SAL)
----------
      5500
	  
SQL> SELECT MIN(SAL) FROM EMPLOYEE;

  MIN(SAL)
----------
       800

SQL> SELECT MIN(HIREDATE) FROM EMPLOYEE;

MIN(HIRED
---------
17-DEC-80

> MAX():
======
- it return maximum value.

EX:
SQL> SELECT MAX(SAL)  FROM EMPLOYEE WHERE JOB='MANAGER';

  MAX(SAL)
----------
      5500

SQL> SELECT MAX(HIREDATE) FROM EMPLOYEE;

MAX(HIRED
---------
12-JAN-83

> COUNT():
========
i) count(*)
ii) count(column name)
iii) count(distinct <column name>)

i) count(*): -counting all values including duplictes and nulls.

EX:
SQL> SELECT * FROM HYD;

       EID ENAME             SAL JOB
---------- ---------- ---------- ----------
      1021 smith            8500 CLERK
      1022 allen            6500 ANALIST
      1023 ward             2500 MANAGER
      1010 smith             2.5 CLERK
	  
SQL> SELECT COUNT(*) FROM HYD;

  COUNT(*)
----------
         4
		 
ii) count(column name):
=======================
- counting all values including duplicates but not nulls.

EX:
SQL> SELECT COUNT(ENAME) FROM HYD;

COUNT(ENAME)
------------
           4
		   
iii) count(distinct <column name>):
====================================
- counting unique values only(i.e no duplicates and no nulls)

EX:
SQL> SELECT COUNT(DISTINCT ENAME) FROM HYD;

COUNT(DISTINCTENAME)
--------------------
                   3
				   






















