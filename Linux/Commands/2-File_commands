1) mkdir [directory_name]	-- Create a new directory.

> showed in blue colour.

~$ mkdir d

~$ ls -lrt
total 20
-rw-r--r-- 1 bob bob   12 Jul 17 10:56 file1
-rw-r--r-- 1 bob bob   27 Jul 17 11:26 f
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file2
drwxr-xr-x 2 bob bob 4096 Jul 17 11:38 d  -- here directory created

> bob@tom:~$ mkdir images
bob@tom:~$ ls -lrt
total 24
-rw-r--r-- 1 bob bob   27 Jul 17 11:26 f
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file2
drwxr-xr-x 2 bob bob 4096 Jul 17 11:38 d
-rw-r--r-- 1 bob bob   10 Jul 17 11:40 file1
drwxr-xr-x 2 bob bob 4096 Jul 17 11:50 images

> bob@tom:~$ mkdir images/pics
bob@tom:~$ cd images
bob@tom:~/images$ ls -lrt
total 4
drwxr-xr-x 2 bob bob 4096 Jul 17 11:51 pics

> bob@tom:~/images$ cd ..
bob@tom:~$ mkdir -p names/{marley,hasan,visa} (here -p is parent)
bob@tom:~$ cd names
bob@tom:~/names$ ls -lrt
total 12
drwxr-xr-x 2 bob bob 4096 Jul 17 11:53 marley
drwxr-xr-x 2 bob bob 4096 Jul 17 11:53 hasan
drwxr-xr-x 2 bob bob 4096 Jul 17 11:53 visa

2) RMDIR : remove specified directory and it must should be empty.

> bob@tom:~$ rmdir d
bob@tom:~$ ls -lrt
total 24
-rw-r--r-- 1 bob bob   27 Jul 17 11:26 f
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file2
-rw-r--r-- 1 bob bob   10 Jul 17 11:40 file1
drwxr-xr-x 3 bob bob 4096 Jul 17 11:51 images
drwxr-xr-x 5 bob bob 4096 Jul 17 12:02 names

> bob@tom:~$ mkdir -p d/man

bob@tom:~$ ls -lrt
total 28
-rw-r--r-- 1 bob bob   27 Jul 17 11:26 f
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file2
-rw-r--r-- 1 bob bob   10 Jul 17 11:40 file1
drwxr-xr-x 3 bob bob 4096 Jul 17 11:51 images
drwxr-xr-x 5 bob bob 4096 Jul 17 12:02 names
drwxr-xr-x 3 bob bob 4096 Jul 17 12:04 d

bob@tom:~$ cd d

bob@tom:~/d$ ls -lrt
total 4
drwxr-xr-x 2 bob bob 4096 Jul 17 12:04 man
bob@tom:~/d$ cd ..

bob@tom:~$ rmdir d
rmdir: failed to remove 'd': Directory not empty

bob@tom:~$ cd d

bob@tom:~/d$ rmdir man

bob@tom:~/d$ ls -lrt
total 0

bob@tom:~/d$ cd ..

bob@tom:~$ rmdir d

bob@tom:~$ ls -lrt
total 24
-rw-r--r-- 1 bob bob   27 Jul 17 11:26 f
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file2
-rw-r--r-- 1 bob bob   10 Jul 17 11:40 file1
drwxr-xr-x 3 bob bob 4096 Jul 17 11:51 images
drwxr-xr-x 5 bob bob 4096 Jul 17 12:02 names

> bob@tom:~$ ls -lrt
total 28
-rw-r--r-- 1 bob bob   27 Jul 17 11:26 f
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file2
-rw-r--r-- 1 bob bob   10 Jul 17 11:40 file1
drwxr-xr-x 3 bob bob 4096 Jul 17 11:51 images
drwxr-xr-x 5 bob bob 4096 Jul 17 12:02 names
drwxr-xr-x 3 bob bob 4096 Jul 17 12:07 a

bob@tom:~$ rmdir -pv a/b/c/d
rmdir: removing directory, 'a/b/c/d'
rmdir: removing directory, 'a/b/c'
rmdir: removing directory, 'a/b'
rmdir: removing directory, 'a'

3) rm [file_name]	Remove a file.

> bob@tom:~$ cat >ff

bob@tom:~$ rm ff

bob@tom:~$ ls -lrt
total 24
-rw-r--r-- 1 bob bob   27 Jul 17 11:26 f
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file2
-rw-r--r-- 1 bob bob   10 Jul 17 11:40 file1
drwxr-xr-x 3 bob bob 4096 Jul 17 11:51 images
drwxr-xr-x 5 bob bob 4096 Jul 17 12:02 names

rm -r [directory_name]	-- Remove a directory recursively.

rm -rf [directory_name]	-- Recursively remove a directory without requiring confirmation.

4) cp [source_file] [destination_file]	Copy the contents of one file to another file using the cp command.

cp -r [source_directory] [destination_directory]	Recursively copy a directory to a second directory.

>bob@tom:~$ cp f ff

bob@tom:~$ ls -lrt
total 28
-rw-r--r-- 1 bob bob   27 Jul 17 11:26 f
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file2
-rw-r--r-- 1 bob bob   10 Jul 17 11:40 file1
drwxr-xr-x 3 bob bob 4096 Jul 17 11:51 images
drwxr-xr-x 5 bob bob 4096 Jul 17 12:02 names
-rw-r--r-- 1 bob bob   27 Jul 17 12:15 ff

bob@tom:~$ cat ff
welcome
hello
ravi
suresh


5) mv [source_file] [destination_file]	Move or rename files or directories.

> bob@tom:~$ cat f
welcome
hello
ravi
suresh

bob@tom:~$ cat >ff
ex

bob@tom:~$ cat ff
ex

bob@tom:~$ mv f ff
bob@tom:~$ cat ff
welcome
hello
ravi
suresh

bob@tom:~$ cat f
cat: f: No such file or directory

bob@tom:~$ ls
ff  file  file1  file2  images  names

bob@tom:~$ mv ff f

bob@tom:~$ cat f
welcome
hello
ravi
suresh


6) ln -s [path]/[file_name] [link_name]	Create a symbolic link to a file.

bob@tom:~$ pwd
/home/bob
bob@tom:~$ ls
bb  job  job.txt  q  shell  tee  w
bob@tom:~$ ln -s /home/bob/job jobmela.com
bob@tom:~$ ls
bb  job  job.txt  jobmela.com  q  shell  tee  w


7) touch [file_name]	Create a new file using touch.
-- Create empty files and change time stamp of created file.
note: if file already exists then we create any file with that existing file name Touch can not over ride  it updates time stamp of file 

bob@tom:~$ mkdir desktop
bob@tom:~$ ls
bigfile  desktop  f1  file  file1  file2  images  names
bob@tom:~$ cd desktop
bob@tom:~/desktop$ touch file1.txt
bob@tom:~/desktop$ cat >file2.txt
Balu
Ramesh
bob@tom:~/desktop$ ls
file1.txt  file2.txt
bob@tom:~/desktop$ ls -lrt
total 4
-rw-r--r-- 1 bob bob  0 Jul 21 10:17 file1.txt
-rw-r--r-- 1 bob bob 12 Jul 21 10:17 file2.txt

change time stamp on file1.txt:

bob@tom:~/desktop$ touch file1.txt
bob@tom:~/desktop$ ls -lrt
total 4
-rw-r--r-- 1 bob bob 12 Jul 21 10:17 file2.txt
-rw-r--r-- 1 bob bob  0 Jul 21 10:19 file1.txt

Create more files :

bob@LAPTOP-1BR3SJJG:~/file1$ touch abc{1..5}.xml
bob@LAPTOP-1BR3SJJG:~/file1$ ls -lrt
total 0
-rw-r--r-- 1 bob bob 0 Oct 21 11:51 f1
-rw-r--r-- 1 bob bob 0 Oct 23 15:24 free
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc1.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc2.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc3.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc4.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc5.xml


7) cat [file_name]	Show the contents of a file.
cat [source_file] >> [destination_file]	Append file contents to another file.

Create new file and write the content and ctrl+d to save the content into file.
note: if file is already present, after we do cat file then it will over ride.

> bob@tom:~$ cat > file1
ravi
suresh

> bob@tom:~$ cat file1
ravi
suresh

>overridden happens :
-------------------
> bob@tom:~$ cat >file1
bob
smith

> bob@tom:~$ cat file1
bob
smith

>bob@tom:~$ cat >file2
welcome

> bob@tom:~$ ls file2
file2

> bob@tom:~$ cat file2
welcome

> bob@tom:~$ cat >>file2
hello

> bob@tom:~$ cat file2
welcome
hello

> bob@tom:~$ cat -n file2
     1  welcome
     2  hello
	 
> concatination:
bob@tom:~$ cat file2 file1>f
bob@tom:~$ cat f
welcome
hello
ravi
suresh

> Merge:
bob@tom:~$ cat file1 file2>file merge
bob@tom:~$ cat file
ravi
suresh
welcome
hello


8) head [file_name]
tail [file_name]

bob@tom:~$ nano myscript.sh
bob@tom:~$ cat myscript.sh
1
2
3
4
5
6
7
8
9

bob@tom:~$ tail myscript.sh
1
2
3
4
5
6
7
8
9

bob@tom:~$ head  myscript.sh
1
2
3
4
5
6
7
8
9

bob@tom:~$ head -n3  myscript.sh
1
2
3
bob@tom:~$ tail -n3  myscript.sh
7
8
9


9) more [file_name]	Display contents of a file page by page.

Enter key: Scrolls down one line at a time.
Space bar: Moves to the next page or screen.
‘b’ key: Goes back one page.
‘q’ key: Quits the more command and exits the view.


10) less [file_name]	Show the contents of a file with navigation using the less command.
Is used to see big text files and it have some extra features such as(adjustment in width and height).
It is similar to more command.
bob@tom:~$less bigfile

>up arrow and down arrow should be use 
>space key is used to navigate page by page
> SHIFT + G -- GOES END OF THE page
>1 +G --GOES TO STARTING page
> /marked --search purpose(/)
>q--quit


11) nano [file_name]	Open or create a file using the nano text editor.

bob@tom:~/desktop$ nano file1.txt
bob@tom:~/desktop$ cat file1.txt
abc
bcd
efg


                        [ Wrote 4 lines ]
^G Help      ^O Write Out ^W Where Is  ^K Cut       ^T Execute
^X Exit      ^R Read File ^\ Replace   ^U Paste     ^J Justify



> bob@tom:~/desktop$ nano abc.cpp ( it identified the c++ extension and others ass well)

 GNU nano 6.2                 abc.cpp *              
  #include<iostream>
  
  
^G Help      ^O Write Out ^W Where Is  ^K Cut       ^T Execute
^X Exit      ^R Read File ^\ Replace   ^U Paste     ^J Justify

to save : ctrl+0 to check file name is ok or rename and ctrl+z


12) vi [file_name] -- edit and view the file

13) vim [file_name] -- Open or create a file using the Vi/Vim text editor.

14) gpg -c [file_name]	-- Encrypt a file.

15) gpg [file_name].gpg	-- Decrypt an encrypted .gpg file.

16) wc -w [file_name]	-- Show the number of words, lines, and bytes in a file using wc.
word count brings count of a new lines words and bytes for each input file.

bob@tom:~$ ls
bigfile  f1    file1  images       names
desktop  file  file2  myscript.sh  newdir
bob@tom:~$ cat file
ravi
suresh
welcome
hello
bob@tom:~$ wc file
 4  4 27 file
 
 4=4 lines
 4=4 words
 27=bytes
 
 bob@tom:~$ wc -c file (bytes)
27 file
bob@tom:~$ wc -l file  (lines)
4 file
bob@tom:~$ wc -w file  (words)
4 file

> ls | xargs wc	List the number of lines/words/characters in each file in a directory with the xargs command.

bob@tom:~$ ls | xargs wc
     30     954    6635 bb
      1       9      64 job
      0       0       0 job.txt
      1       9      64 jobmela.com
      3       9      18 q
wc: shell: Is a directory
      0       0       0 shell
      2       2      10 tee
      3      12      24 w
     40     995    6815 total


17) cut -d [delimiter] [file_name] -- Cut a section of a file and print the result to standard output.
-- The cut command is a command-line utility that allows you to cut out sections of a specified file or piped data and print the result to standard output. 
(here -d =deliminator)
ex:

system@tom:~$ cat>aaa
terraform aws linux
c c++ java
python unix cloud
^C

system@tom:~$ cut -d " " -f 1,3 aaa
terraform linux
c java
python cloud

[data] | cut -d [delimiter] -- Cut a section of piped data and print the result to standard output.

18) shred -u [file_name] -- Overwrite a file to prevent its recovery, then delete it.

-n, –iterations=N	
This option allows you to specify the number of times the file will be overwritten during the shredding process. By default, Shred performs 3 iterations.

-u, –remove	
This option instructs Shred to remove the file after the shredding process is complete.

-v, –verbose	
When using this option, Shred provides detailed information about the shredding process.

-z, –zero	
This option adds a final overwrite of all zeros to the file after the shredding process is complete. This helps to hide the fact that the file has been shredded.

-f, –force	
This option forces Shred to shred files that have read-only permissions or are otherwise protected.

-r, –random-source=FILE	
With this option, you can specify a file as the source of random data for overwriting the file being shredded.


19) diff [first_file] [second_file]-- Compare two files and display differences.

20) source [file_name]	Read and execute the file content in the current shell.

bob@tom:~$ vi date_checker
edit line as (date)
bob@tom:~$ source date_checker
Wed Oct  9 16:43:49 IST 2024


21) [command] | tee [file_name] >/dev/null	-- Store the command output in a file and skip the terminal output.
