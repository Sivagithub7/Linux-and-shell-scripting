1) cat: Create new file and write the content and ctrl+d to save the content into file.
note: id file is present after we do cat file then it will over ride.

> bob@tom:~$ cat > file1
ravi
suresh

> bob@tom:~$ cat file1
ravi
suresh

>overridden happens :
-------------------
> bob@tom:~$ cat >file1
bob
smith

> bob@tom:~$ cat file1
bob
smith

>bob@tom:~$ cat >file2
welcome

> bob@tom:~$ ls file2
file2

> bob@tom:~$ cat file2
welcome

> bob@tom:~$ cat >>file2
hello

> bob@tom:~$ cat file2
welcome
hello

> bob@tom:~$ cat -n file2
     1  welcome
     2  hello
	 
> concatination:
bob@tom:~$ cat file2 file1>f
bob@tom:~$ cat f
welcome
hello
ravi
suresh

> Merge:
bob@tom:~$ cat file1 file2>file merge
bob@tom:~$ cat file
ravi
suresh
welcome
hello

2)  ls: List the content of directory.
> bob@tom:~$ ls -lrt
total 16
-rw-r--r-- 1 bob bob 12 Jul 17 10:56 file1
-rw-r--r-- 1 bob bob 27 Jul 17 11:26 f
-rw-r--r-- 1 bob bob 27 Jul 17 11:27 file
-rw-r--r-- 1 bob bob 27 Jul 17 11:27 file2

> bob@tom:~$ ls
f  file  file1  file2

> bob@tom:~$ ls /
bin   etc   lib    libx32      mnt   root  snap  tmp
boot  home  lib32  lost+found  opt   run   srv   usr
dev   init  lib64  media       proc  sbin  sys   var

> bob@tom:~$ ls ../..
bin   etc   lib    libx32      mnt   root  snap  tmp
boot  home  lib32  lost+found  opt   run   srv   usr
dev   init  lib64  media       proc  sbin  sys   var

> bob@tom:~$ ls -l (long lists and files)
total 16
-rw-r--r-- 1 bob bob 27 Jul 17 11:26 f
-rw-r--r-- 1 bob bob 27 Jul 17 11:27 file
-rw-r--r-- 1 bob bob 12 Jul 17 10:56 file1
-rw-r--r-- 1 bob bob 27 Jul 17 11:27 file2

> bob@tom:~$ ls -a (hidden lists)
.   .bash_logout  .cache    .motd_shown  f     file1
..  .bashrc       .lesshst  .profile     file  file2

> bob@tom:~$ ls -al (long list)
total 44
drwxr-x--- 3 bob bob 4096 Jul 17 11:27 .
drwxr-xr-x 3 root       root       4096 Jul 16 20:05 ..
-rw-r--r-- 1 bob bob  220 Jul 16 20:05 .bash_logout
-rw-r--r-- 1 bob bob 3771 Jul 16 20:05 .bashrc
drwx------ 2 bob bob 4096 Jul 16 20:06 .cache
-rw------- 1 bob bob   20 Jul 17 10:30 .lesshst
-rw-r--r-- 1 bob bob    0 Jul 16 20:06 .motd_shown
-rw-r--r-- 1 bob bob  807 Jul 16 20:05 .profile
-rw-r--r-- 1 bob bob   27 Jul 17 11:26 f
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file
-rw-r--r-- 1 bob bob   12 Jul 17 10:56 file1
-rw-r--r-- 1 bob bob   27 Jul 17 11:27 file2

ls -l -->shows metadata 
system@tom:~/f1$ ls -l
total 0
-rw-r--r-- 1 system system 0 Aug 26 12:22 file1

ls -l -a -->shows all metadatasystem@tom:~/f1$ ls -l -a
total 8
drwxr-xr-x 2 system system 4096 Aug 26 12:22 .
drwxr-x--- 6 system system 4096 Aug 26 12:21 ..
-rw-r--r-- 1 system system    0 Aug 26 12:22 file1


3) Touch: Create empty files and change time stamp of created file.
note: if file already exists then we create any file with that existing file name Touch can not over ride  it updates time stamp of file 

bob@tom:~$ mkdir desktop
bob@tom:~$ ls
bigfile  desktop  f1  file  file1  file2  images  names
bob@tom:~$ cd desktop
bob@tom:~/desktop$ touch file1.txt
bob@tom:~/desktop$ cat >file2.txt
Balu
Ramesh
bob@tom:~/desktop$ ls
file1.txt  file2.txt
bob@tom:~/desktop$ ls -lrt
total 4
-rw-r--r-- 1 bob bob  0 Jul 21 10:17 file1.txt
-rw-r--r-- 1 bob bob 12 Jul 21 10:17 file2.txt

change time stamp on file1.txt:

bob@tom:~/desktop$ touch file1.txt
bob@tom:~/desktop$ ls -lrt
total 4
-rw-r--r-- 1 bob bob 12 Jul 21 10:17 file2.txt
-rw-r--r-- 1 bob bob  0 Jul 21 10:19 file1.txt

Create more files :

bob@LAPTOP-1BR3SJJG:~/file1$ touch abc{1..5}.xml
bob@LAPTOP-1BR3SJJG:~/file1$ ls -lrt
total 0
-rw-r--r-- 1 bob bob 0 Oct 21 11:51 f1
-rw-r--r-- 1 bob bob 0 Oct 23 15:24 free
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc1.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc2.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc3.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc4.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc5.xml

4) Nano: 

bob@tom:~/desktop$ nano file1.txt
bob@tom:~/desktop$ cat file1.txt
abc
bcd
efg


                        [ Wrote 4 lines ]
^G Help      ^O Write Out ^W Where Is  ^K Cut       ^T Execute
^X Exit      ^R Read File ^\ Replace   ^U Paste     ^J Justify



> bob@tom:~/desktop$ nano abc.cpp ( it identified the c++ extension and others ass well)

 GNU nano 6.2                 abc.cpp *              
  #include<iostream>
  
  
^G Help      ^O Write Out ^W Where Is  ^K Cut       ^T Execute
^X Exit      ^R Read File ^\ Replace   ^U Paste     ^J Justify

to save : ctrl+0 to check file name is ok or rename and ctrl+z

5) Sudo:command is used to administation access to another user 

bob@tom:~/desktop$ mkdir newdir
bob@tom:~/desktop$ ls
abc.cpp  file1.txt  file2.txt  newdir
bob@tom:~/desktop$ rmdir newdir
bob@tom:~/desktop$
bob@tom:~/desktop$ ls
abc.cpp  file1.txt  file2.txt
bob@tom:~/desktop$ cd ..
bob@tom:~$ rmdir newdir
rmdir: failed to remove 'newdir': No such file or directory
bob@tom:~$ mkdir newdir
bob@tom:~$ ls
bigfile  desktop  f1  file  file1  file2  images  names  newdir
bob@tom:~$ sudo newdir
[sudo] password for bob:
sudo: newdir: command not found
bob@tom:~$ mkdir newdir
mkdir: cannot create directory ‘newdir’: File exists
bob@tom:~$ sudo -s
root@tom:/home/bob# exit
exit

If we want to download any thing.
root@tom:/home/bob# sudo apt-get install <command to download>

6) Top: View active process live with their system usage.

- It will change every 3 sec
- Press S , it will set refresh number.
- Filter idle process press(i).
- Quit press q.


7) ECHO: Print any text follows the command /string that is passed an argument.
bob@tom:~$ echo helo world
helo world

bob@tom:~$ echo "hello world"
hello world

bob@tom:~$ myvar="mark"
bob@tom:~$ echo $myvar
mark

bob@tom:~$ x=10
bob@tom:~$ echo "the value of x is $x"
the value of x is 10

bob@tom:~$ echo -e 'some \text'
some    ext

bob@tom:~$ echo -e 'some \n text'
some
 text
 
bob@tom:~$ echo -e 'some \ntext'
some
text


8) CLEAR : CLEAR ALL THE WHAT WE WROTE UPTO NOW .

9) help commands:
whatis cmd
cmd --help
man cmd

10) i/p and o/p redirects(>,>>,<,stdin,stdout and stderr)

There are 3 redirects in Linux
1. Standard input (stdin) and it has file descriptor number as 0
2. Standard output (stdout) and it has file descriptor number as 1
3. Standard error (stderr) and it has file descriptor number as 2
• Output (stdout) - 1
• By default when running a command its output goes to the terminal
• The output of a command can be routed to a file using > symbol
• E.g.
> STDUOUT:(-1)

bob@LAPTOP-1BR3SJJG:~/file1$ ls -l
total 0
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc1.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc2.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc3.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc4.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc5.xml
-rw-r--r-- 1 bob bob 0 Oct 21 11:51 f1
-rw-r--r-- 1 bob bob 0 Oct 23 15:24 free
bob@LAPTOP-1BR3SJJG:~/file1$ ls -l>mydir
bob@LAPTOP-1BR3SJJG:~/file1$ cat mydir
total 0
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc1.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc2.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc3.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc4.xml
-rw-r--r-- 1 bob bob 0 Oct 23 15:47 abc5.xml
-rw-r--r-- 1 bob bob 0 Oct 21 11:51 f1
-rw-r--r-- 1 bob bob 0 Oct 23 15:24 free
-rw-r--r-- 1 bob bob 0 Oct 24 10:44 mydir
bob@LAPTOP-1BR3SJJG:~/file1$ ls -l
total 0
-rw-r--r-- 1 bob bob   0 Oct 23 15:47 abc1.xml
-rw-r--r-- 1 bob bob   0 Oct 23 15:47 abc2.xml
-rw-r--r-- 1 bob bob   0 Oct 23 15:47 abc3.xml
-rw-r--r-- 1 bob bob   0 Oct 23 15:47 abc4.xml
-rw-r--r-- 1 bob bob   0 Oct 23 15:47 abc5.xml
-rw-r--r-- 1 bob bob   0 Oct 21 11:51 f1
-rw-r--r-- 1 bob bob   0 Oct 23 15:24 free
-rw-r--r-- 1 bob bob 467 Oct 24 10:44 mydir

ex:
bob@LAPTOP-1BR3SJJG:~/file1$ cat > f2
hello
^C
bob@LAPTOP-1BR3SJJG:~/file1$ echo "world" >> f2
bob@LAPTOP-1BR3SJJG:~/file1$ cat f2
hello
world
bob@LAPTOP-1BR3SJJG:~/file1$ cat "person" >> f2
cat: person: No such file or directory
bob@LAPTOP-1BR3SJJG:~/file1$ cat "f2" >> person
bob@LAPTOP-1BR3SJJG:~/file1$ cat f2
hello
world
bob@LAPTOP-1BR3SJJG:~/file1$ echo "person" >> f2
bob@LAPTOP-1BR3SJJG:~/file1$ cat f2
hello
world
person
bob@LAPTOP-1BR3SJJG:~/file1$ echo "men" > f2
bob@LAPTOP-1BR3SJJG:~/file1$ cat f2
men

> stdin:(-0)

ex: 
bob@LAPTOP-1BR3SJJG:~/file1$ cat < f2
men

> stderr:(2>)

bob@LAPTOP-1BR3SJJG:~/file1$ ls -l /root
ls: cannot open directory '/root': Permission denied
bob@LAPTOP-1BR3SJJG:~/file1$ ls -l /root 2> errorfile
bob@LAPTOP-1BR3SJJG:~/file1$ telnet localhost
Trying 127.0.0.1...
telnet: Unable to connect to remote host: Connection refused
bob@LAPTOP-1BR3SJJG:~/file1$ telnet localhost 2> errorfile
Trying 127.0.0.1...

note: error goes to
bob@LAPTOP-1BR3SJJG:~/file1$ cat errorfile
telnet: Unable to connect to remote host: Connection refused


